// This is your Prisma schema file: https://pris.ly/d/prisma-schema
// Migrate docs: https://www.prisma.io/docs/orm/prisma-migrate/getting-started

generator client {
    provider = "prisma-client-js" // Generates a TypeScript/JavaScript client
}

datasource db {
    provider = "postgresql"
    // Supported providers: postgresql, mysql, sqlite, sqlserver, mongodb
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL") // Connection string
}

// ********** Necessary for Next auth **********
model Account {
    // For next-auth
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    // For next-auth
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model User {
    // For next-auth
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // User Profile
    username  String? @unique
    color     String? @default("#E0A64E")
    biography String?
    location  String?
    education String?
    pronouns  String?
    work      String?

    // Relationships
    articles      Article[] // One-to-many relationship with Article
    comments      Comment[] // One-to-many relationship with Comment
    organizations Organization[] @relation("UserOrganizations") // Many-to-many with Organization

    // Profile information (can be denormalized for performance)
    profileImageUrl String? // Redundant for performance
}

model Organization {
    id              String    @id @default(cuid())
    name            String
    profileImageUrl String? // URL for organization profile image
    description     String?
    users           User[]    @relation("UserOrganizations") // Many-to-many relationship with User
    articles        Article[] // One-to-many relationship with Articles

    // Optional organization-specific fields
    website      String?
    contactEmail String?
}

model VerificationToken {
    // For next-auth
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ********** Custom tables **********
model Article {
    id                       String   @id @default(cuid())
    title                    String
    path                     String   @unique // Ensures article paths are unique
    userId                   String // Foreign key to User
    organizationId           String? // Foreign key to Organization (optional)
    commentsCount            Int      @default(0) // Count of comments for this article
    reactionsCount           Int      @default(0) // Reactions count
    publishedAt              DateTime @default(now())
    editedAt                 DateTime
    userName                 String // Redundant, to avoid joining user table for article owner
    userProfileImageUrl      String // Redundant, to avoid joining user table for article owner
    organizationName         String? // Redundant, for articles belonging to organizations
    organizationProfileImage String? // Redundant, for articles belonging to organizations
    mainImage                String // Main image of the article
    tagList                  String[] // Array of tags related to the article
    bodyPreview              String? // Preview of the article body for quick display

    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
    organization Organization? @relation(fields: [organizationId], references: [id]) // Optional relation to Organization
    comments     Comment[]     @relation("ArticleComments") // One-to-many relationship with comments

    @@index([path]) // Index for faster querying by article path
}

model Comment {
    id                  Int      @id @default(autoincrement())
    articleId           String // Foreign key to Article
    commentId           Int      @unique
    userId              String // Foreign key to User
    publishedAt         DateTime @default(now())
    editedAt            DateTime
    content             String
    userName            String // Redundant for performance (user's username)
    userProfileImageUrl String // Redundant for performance (user's profile image URL)
    parentCommentId     Int? // For nested replies (optional)
    isDeleted           Boolean  @default(false) // Soft delete for comments

    article Article @relation("ArticleComments", fields: [articleId], references: [id], onDelete: Cascade) // Relation to Article
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User

    @@index([articleId, publishedAt]) // Index for efficient querying by article and publication date
    @@index([parentCommentId]) // Optional index for threaded comments
}
